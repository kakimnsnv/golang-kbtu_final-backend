// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db_gen

import (
	"context"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO cart_items (cart_id, product_id, quantity)
VALUES (
    (SELECT id FROM user_carts WHERE user_id = $1),
    $2, 
    $3
)
ON CONFLICT (cart_id, product_id) DO UPDATE 
SET quantity = cart_items.quantity + $3, 
    updated_at = NOW()
RETURNING id, cart_id, product_id, quantity, total_price, created_at, updated_at, deleted_at
`

type AddToCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (CartItem, error) {
	row := q.db.QueryRow(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.CartID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCart = `-- name: GetCart :one
SELECT 
    uc.id AS cart_id, 
    uc.user_id, 
    json_agg(
        json_build_object(
            'id', ci.id,
            'product_id', ci.product_id,
            'quantity', ci.quantity,
            'product_name', p.name,
            'product_price', p.price
        )
    ) AS items
FROM user_carts uc
LEFT JOIN cart_items ci ON uc.id = ci.cart_id
LEFT JOIN products p ON ci.product_id = p.id
WHERE uc.user_id = $1
GROUP BY uc.id, uc.user_id
`

type GetCartRow struct {
	CartID uuid.UUID `json:"cart_id"`
	UserID uuid.UUID `json:"user_id"`
	Items  []byte    `json:"items"`
}

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) (GetCartRow, error) {
	row := q.db.QueryRow(ctx, getCart, userID)
	var i GetCartRow
	err := row.Scan(&i.CartID, &i.UserID, &i.Items)
	return i, err
}

const removeFromCart = `-- name: RemoveFromCart :exec
DELETE FROM cart_items 
WHERE cart_id = (SELECT id FROM user_carts WHERE user_id = $1) 
AND product_id = $2
`

type RemoveFromCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) RemoveFromCart(ctx context.Context, arg RemoveFromCartParams) error {
	_, err := q.db.Exec(ctx, removeFromCart, arg.UserID, arg.ProductID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
UPDATE cart_items 
SET quantity = $1, 
    updated_at = NOW()
WHERE cart_id = (SELECT id FROM user_carts WHERE user_id = $2)
AND product_id = $3
`

type UpdateCartItemQuantityParams struct {
	NewQuantity int32     `json:"new_quantity"`
	UserID      uuid.UUID `json:"user_id"`
	ProductID   uuid.UUID `json:"product_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.Exec(ctx, updateCartItemQuantity, arg.NewQuantity, arg.UserID, arg.ProductID)
	return err
}
